source('~/.active-rstudio-document', echo=TRUE)
githubURL = "https://github.com/jwindokun/FinalProject/raw/master/data/gourmetFoods.RData"
try ({
w = load(url(githubURL))
})
w
source('~/.active-rstudio-document', echo=TRUE)
t = 5
source('~/.active-rstudio-document', echo=TRUE)
ggplot(gourmetFoods, aes(x=gourmetFoods$score,y=gourmetFoods$helpfulness)) + geom_point(position=position_jitter(w=0.1,h=0.0), color ="red") +
geom_smooth(method="lm", se=FALSE, fill = "blue", size = 2) + ylab('Helpfulness Score') + xlab('Reviewer Score') + ggtitle("Scatter Plot of Helpfullness Score vs Reviwer Score")
fit = lm(helpfulness ~score, data = gourmetFoods)
coef(fit)
anova(fit)
summary(fit)
githubURL = "https://github.com/jwindokun/FinalProject/raw/master/data/gourmetFoods.RData"
try ({
load(url(githubURL))
})
t = 5
sql = "SELECT Count(gourmetFoods.userID) AS numReviews, gourmetFoods.profileName FROM gourmetFoods GROUP BY gourmetFoods.profileName
HAVING (((gourmetFoods.profileName)<>'unknown')) ORDER BY Count(gourmetFoods.userID) DESC limit 10 ;"
result = sqldf(sql)
ggplot(result, aes(x = reorder(profileName, numReviews), y = numReviews)) + geom_bar(stat="identity", fill="lightblue", colour="black") +
labs(title = "Number of Reviews per Reviewer (Top Ten Reviewers)", x = "Reviewer", y = "Count") + theme_bw()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
Sys.sleep (t)
sql = "SELECT Count(gourmetFoods.userID) AS numReviews, gourmetFoods.profileName, Avg(gourmetFoods.score) AS AvgOfscore, Max(gourmetFoods.score) AS MaxOfscore, Min(gourmetfoods.score) AS MinOfscore
FROM gourmetFoods GROUP BY gourmetFoods.profileName HAVING (((gourmetFoods.profileName)<>'unknown')) ORDER BY Count(gourmetFoods.userID) DESC limit 10;"
result = sqldf(sql)
ggplot(result, aes(x = reorder(profileName, AvgOfscore), y = AvgOfscore)) + geom_bar(stat="identity", fill="green", colour="red") +
labs(title = "Average Reviewer Score By Reviewer (Top Ten Reviewers)", x = "Reviewer", y = "Average Score") + theme_bw()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
Sys.sleep (t)
sql = "SELECT gourmetFoods.userID, gourmetFoods.profileName, Avg(gourmetFoods.helpfulness) AS aveOfhelpfulness, Count(gourmetFoods.helpfulness) AS countOfHelpfulness
FROM gourmetFoods GROUP BY gourmetFoods.userID, gourmetFoods.profileName ORDER BY Avg(gourmetFoods.helpfulness)  DESC , Count(gourmetFoods.helpfulness)
DESC limit 10;"
result = sqldf(sql)
ggplot(result, aes(x = reorder(profileName, aveOfhelpfulness),  y = aveOfhelpfulness,fill = countOfHelpfulness)) + geom_bar(stat="identity", fill = "brown", colour="red") +
labs(title = "Average Helpfullness Score By Reviewer (Top Ten Reviewers)", x = "Reviewer", y = "Average Score") + theme_bw()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
Sys.sleep (t)
ggplot(gourmetFoods, aes(x=gourmetFoods$score,y=gourmetFoods$helpfulness)) + geom_point(position=position_jitter(w=0.1,h=0.0), color ="red") +
geom_smooth(method="lm", se=FALSE, fill = "blue", size = 2) + ylab('Helpfulness Score') + xlab('Reviewer Score') + ggtitle("Scatter Plot of Helpfullness Score vs Reviwer Score")
# Statistics
fit = lm(helpfulness ~score, data = gourmetFoods)
coef(fit)
anova(fit)
summary(fit)
Sys.sleep (t)
# look at Sentiment Analysis of summary and text
githubURL = "https://github.com/jwindokun/FinalProject/raw/master/data/gourmetFoodsAPI.RData"
try ({
load(url(githubURL))
})
ggplot(gourmetFoodsAPI, aes(x=gourmetFoodsAPI$apisummaryScore,y=gourmetFoodsAPI$apitextScore)) + geom_point(position=position_jitter(w=0.1,h=0.0), color ="red") +
geom_smooth(method="lm", se=FALSE, fill = "blue", size = 2) + ylab('Text Score') + xlab('Summary Score') + ggtitle("Scatter Plot of Summry Score vs Text Score")
fit = lm(apitextScore ~apisummaryScore, data = gourmetFoodsAPI)
coef(fit)
anova(fit)
summary(fit)
```
```{r requiredLibraries}
if(!require(stringr)) install.packages("stringr")
library(stringr)
if(!require(RCurl)) install.packages ("RCurl")
library(RCurl)
if(!require(rjson)) install.packages ("rjson")
library(rjson)
if (!require(devtools)) install.packages('devtools')
library(devtools)
if (!require(rvest)) install_github("hadley/rvest")
library(rvest)
if (!require(XML)) install.packages('XML')
library(XML)
if(!require(sqldf)) install.packages ("sqldf")
library(sqldf)
if(!require(ggplot2)) install.packages ("ggplot2")
library(ggplot2)
```
Will read in the data from github
```{r amazonData}
x <- "https://raw.githubusercontent.com/jwindokun/FinalProject/master/data/gourmetFoods_test.txt"
try ({
line=readLines(x, n = -1L, ok = TRUE, warn = FALSE)
})
```{r requiredLibraries}
try({
if(!require(stringr)) install.packages("stringr")
library(stringr)
if(!require(RCurl)) install.packages ("RCurl")
library(RCurl)
if(!require(rjson)) install.packages ("rjson")
library(rjson)
if (!require(devtools)) install.packages('devtools')
library(devtools)
if (!require(rvest)) install_github("hadley/rvest")
library(rvest)
if (!require(XML)) install.packages('XML')
library(XML)
if(!require(sqldf)) install.packages ("sqldf")
library(sqldf)
if(!require(ggplot2)) install.packages ("ggplot2")
library(ggplot2)
}, silent = TRUE)
```
if(!require(stringr)) install.packages("stringr")
library(stringr)
if(!require(RCurl)) install.packages ("RCurl")
library(RCurl)
if(!require(rjson)) install.packages ("rjson")
library(rjson)
if (!require(devtools)) install.packages('devtools')
library(devtools)
if (!require(rvest)) install_github("hadley/rvest")
library(rvest)
if (!require(XML)) install.packages('XML')
library(XML)
if(!require(sqldf)) install.packages ("sqldf")
library(sqldf)
if(!require(ggplot2)) install.packages ("ggplot2")
library(ggplot2)
x <- "https://raw.githubusercontent.com/jwindokun/FinalProject/master/data/gourmetFoods_test.txt"
try ({
line=readLines(x, n = -1L, ok = TRUE, warn = FALSE)
})
try({
df <- data.frame(productID =character(), title = character(), price = as.numeric(character()), userID =character(), profileName = character(),
helpfulness = character(), score = as.numeric(character()), time = character(), summary = character(), text = character(),stringsAsFactors=FALSE)
n = 1
d <- data.frame(productID =character(), title = character(), price = as.numeric(character()), userID =character(), profileName = character(),
helpfulness = character(), score = as.numeric(character()), time = character(), summary = character(), text = character(),stringsAsFactors=FALSE)
}, silent = TRUE)
#for (i in 1:length(line)){
# for the purpose of demonstration will only read in the first 10000 lines of the file
for (i in 1:1000){
try({
w = str_split_fixed(line[i], ":", 2)
if (!is.na(w[1])){
if (n < 11) {
d[1, n] = str_trim(w[2])
n = n + 1
} else {
df = rbind(df, d)
n = 1
}
}
}, silent = TRUE)
}
#clean the data
str(df)
df$time = as.POSIXct(as.numeric(df$time), origin="1970-01-01")
df$price[df$price == "unknown"] = 0
df$price = as.numeric(df$price)
df$score = as.numeric(df$score)
for (i in 1 :length(df$helpfulness)){
try({
e = df$helpfulness[i]
e = strsplit(e, split = "/", fixed = TRUE)[[1]]
e = as.numeric(e[1])/as.numeric(e[2])
if (is.finite(e)) {
df$helpfulness[i] = e
} else {
df$helpfulness[i] = 0
}
}, silent = TRUE)
}
df$helpfulness = as.numeric(df$helpfulness)
str(df)
df[1,]
githubURL = "https://github.com/jwindokun/FinalProject/raw/master/data/gourmetFoods.RData"
try ({
w = load(url(githubURL))
})
api_key = "45319ace2f7c43fc55d05c2f973ba6261a5de4f0"
api = paste("http://access.alchemyapi.com/calls/text/TextGetTextSentiment?apikey=", api_key, "&outputMode=json", "&text=", sep = "")
gourmetFoodsAPI = gourmetFoods
gourmetFoodsAPI[1,]
#for i in 1:nrow(gourmetfoodsAPI){
for (i in 1:2){
if (length(gourmetFoodsAPI$text[i]) > 0) {
phrase = URLencode(gourmetFoodsAPI$text[i])
api_url = paste(api, phrase, sep="")
result = getURI(api_url)
r = fromJSON(result)
gourmetFoodsAPI$apitextType[i] = ifelse(!is.null(r$docSentiment$type), r$docSentiment$type, "")
gourmetFoodsAPI$apitextScore[i] = ifelse(!is.null(r$docSentiment$score), r$docSentiment$score, 0)
}
if (length(gourmetFoodsAPI$summary[i]) > 0) {
phrase = URLencode(gourmetFoodsAPI$summary[i])
api_url = paste(api, phrase, sep="")
result = getURI(api_url)
r = fromJSON(result)
gourmetFoodsAPI$apisummaryType[i] = ifelse(!is.null(r$docSentiment$type), r$docSentiment$type, "")
gourmetFoodsAPI$apisummaryScore[i] = ifelse(!is.null(r$docSentiment$score), r$docSentiment$score, 0)
}
Sys.sleep(2)
}
gourmetFoodsAPI[1,]
githubURL = "https://github.com/jwindokun/FinalProject/raw/master/data/gourmetFoods.RData"
try ({
load(url(githubURL))
})
dfAmazon <- data.frame(userID = character(), reviewerName =  character(), numReviews = numeric(), itemName = character(),
itemPrice = numeric(), date = character(), text = character(),stringsAsFactors=FALSE)
# For demonstration purposes will only use the first 10 rows
#for (i in length(gourmetFoods)) {
for (i in 10) {
try({
userID = gourmetFoods$userID[i]
website = paste("http://www.amazon.com/gp/cdp/member-reviews/", userID, sep ="")
r_site <- html(website)
r <- r_site %>%
html_nodes(".small") %>%
html_text() %>%
gsub("[\t\n\r\f\v]", "", .)
#Get the reviewer name
df <- data.frame(userID = character(), reviewerName =  character(), numReviews = numeric(), itemName = character(),
itemPrice = numeric(), date = character(), text = character(),stringsAsFactors=FALSE)
# First line contains reviewer information
reviewerName = substr(str_trim(r[1]), start = 13, stop = (nchar(str_trim(r[1])) -10))
# Line 3 contains the total number of reviewsreviews
numReviews = as.numeric(strsplit(str_trim(r[3]), split = " ", fixed = TRUE)[[1]][3])
# get the items reviewed
# Line 16 and (with an interval of 8) contains information on the item reviewed)
n = 1
for (i in seq(16,length(r),8)){
df[n, "userID"] = ifelse(!is.null(userID), userID, "")
df[n, "reviewerName"] = ifelse(!is.null(reviewerName), reviewerName, "")
df[n, "numReviews"] =ifelse(!is.null(numReviews), numReviews, 0)
t = str_split_fixed(str_trim(r[i]), ":", 2)
while (nchar(t[1]) < 4){
t = str_split_fixed(str_trim(r[i + 1]), ":", 2)
i = i+1
}
t = str_split_fixed(str_trim(r[i]), "Price:", 2)
df[n, "itemName"] = ifelse(!is.null(t[1]), t[1], "")
#df[n, "itemPrice"] =ifelse(!is.null(t[2]), as.numeric(str_sub(str_trim(t[2]),2)), 0)
p = as.numeric(str_sub(str_trim(t[2]),2))
f <- function(x) is.numeric(x) & !is.na(x)
#print (f(p))
df[n, "itemPrice"] =ifelse(f(p), p, 0)
n = n + 1
}
# Line 20 and (with an interval of 20 contains information on the date of the review, and the text of the review)
n = 1
for (i in seq(20,length(r),8)){
gDate <- "(([[:alpha:]]+)([[:space:]])([0-9]{1,2})([,])([[:space:]])([0-9]{4}))"
strings <- str_trim(r[i])
date = str_extract(strings, gDate)
while (is.na(date)){
strings <- str_trim(r[i+1])
date = str_extract(strings, gDate)
i = i+1
}
#date = as.Date(str_extract(strings, gDate), "%B %d, %Y")
#print (date)
f = function (x) is.na(as.Date(as.character(x),format="%B/%m/%Y"))
df[n, "date"] = ifelse(f(date), date, "")
s = str_split_fixed(str_trim(r[i]), ":", 2)[2]
s = str_trim(str_split_fixed(s, ")", 2)[2])
df[n, "text"] = ifelse(!is.null(s), s, "")
n = n + 1
}
dfAmazon = rbind(dfAmazon, df)
Sys.sleep (2)
}, silent = TRUE)
}
str(dfAmazon)
dfAmazon[1,]
githubURL = "https://github.com/jwindokun/FinalProject/raw/master/data/gourmetFoods.RData"
try ({
load(url(githubURL))
})
t = 5
#Users with the most reviews
sql = "SELECT Count(gourmetFoods.userID) AS numReviews, gourmetFoods.profileName FROM gourmetFoods GROUP BY gourmetFoods.profileName
HAVING (((gourmetFoods.profileName)<>'unknown')) ORDER BY Count(gourmetFoods.userID) DESC limit 10 ;"
result = sqldf(sql)
ggplot(result, aes(x = reorder(profileName, numReviews), y = numReviews)) + geom_bar(stat="identity", fill="lightblue", colour="black") +
labs(title = "Number of Reviews per Reviewer (Top Ten Reviewers)", x = "Reviewer", y = "Count") + theme_bw()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
Sys.sleep (t)
#Average Review Score by Reviewer
sql = "SELECT Count(gourmetFoods.userID) AS numReviews, gourmetFoods.profileName, Avg(gourmetFoods.score) AS AvgOfscore, Max(gourmetFoods.score) AS MaxOfscore, Min(gourmetfoods.score) AS MinOfscore
FROM gourmetFoods GROUP BY gourmetFoods.profileName HAVING (((gourmetFoods.profileName)<>'unknown')) ORDER BY Count(gourmetFoods.userID) DESC limit 10;"
result = sqldf(sql)
ggplot(result, aes(x = reorder(profileName, AvgOfscore), y = AvgOfscore)) + geom_bar(stat="identity", fill="green", colour="red") +
labs(title = "Average Reviewer Score By Reviewer (Top Ten Reviewers)", x = "Reviewer", y = "Average Score") + theme_bw()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
Sys.sleep (t)
#Average helpfulness per reviewer
sql = "SELECT gourmetFoods.userID, gourmetFoods.profileName, Avg(gourmetFoods.helpfulness) AS aveOfhelpfulness, Count(gourmetFoods.helpfulness) AS countOfHelpfulness
FROM gourmetFoods GROUP BY gourmetFoods.userID, gourmetFoods.profileName ORDER BY Avg(gourmetFoods.helpfulness)  DESC , Count(gourmetFoods.helpfulness)
DESC limit 10;"
result = sqldf(sql)
ggplot(result, aes(x = reorder(profileName, aveOfhelpfulness),  y = aveOfhelpfulness,fill = countOfHelpfulness)) + geom_bar(stat="identity", fill = "brown", colour="red") +
labs(title = "Average Helpfullness Score By Reviewer (Top Ten Reviewers)", x = "Reviewer", y = "Average Score") + theme_bw()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
Sys.sleep (t)
#Ploting Helpfulness score with Reviewer score
ggplot(gourmetFoods, aes(x=gourmetFoods$score,y=gourmetFoods$helpfulness)) + geom_point(position=position_jitter(w=0.1,h=0.0), color ="red") +
geom_smooth(method="lm", se=FALSE, fill = "blue", size = 2) + ylab('Helpfulness Score') + xlab('Reviewer Score') + ggtitle("Scatter Plot of Helpfullness Score vs Reviwer Score")
# Statistics
fit = lm(helpfulness ~score, data = gourmetFoods)
coef(fit)
anova(fit)
summary(fit)
Sys.sleep (t)
# look at Sentiment Analysis of summary and text
githubURL = "https://github.com/jwindokun/FinalProject/raw/master/data/gourmetFoodsAPI.RData"
try ({
load(url(githubURL))
})
ggplot(gourmetFoodsAPI, aes(x=gourmetFoodsAPI$apisummaryScore,y=gourmetFoodsAPI$apitextScore)) + geom_point(position=position_jitter(w=0.1,h=0.0), color ="red") +
geom_smooth(method="lm", se=FALSE, fill = "blue", size = 2) + ylab('Text Score') + xlab('Summary Score') + ggtitle("Scatter Plot of Summry Score vs Text Score")
fit = lm(apitextScore ~apisummaryScore, data = gourmetFoodsAPI)
coef(fit)
anova(fit)
summary(fit)
