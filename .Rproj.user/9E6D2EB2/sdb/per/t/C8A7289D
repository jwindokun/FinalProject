{
    "contents" : "---\ntitle: \"Untitled\"\nauthor: \"Adejare Windokun\"\ndate: \"Friday, December 12, 2014\"\noutput: html_document\n---\n\nThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.\n\nWhen you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\n\n```{r requiredLibraries}\nif(!require(stringr)) install.packages(\"stringr\")\nlibrary(stringr)\nif(!require(RCurl)) install.packages (\"RCurl\")\nlibrary(RCurl)\nif(!require(rjson)) install.packages (\"rjson\")\nlibrary(rjson)\nif (!require(devtools)) install.packages('devtools')\nlibrary(devtools)\nif (!require(rvest)) install_github(\"hadley/rvest\")\nlibrary(rvest)\nif (!require(XML)) install.packages('XML')\nlibrary(XML)\nif(!require(sqldf)) install.packages (\"sqldf\")\nlibrary(sqldf)\n\nif(!require(ggplot2)) install.packages (\"ggplot2\")\nlibrary(ggplot2)\n\n\n\n```\n\nCode to read local files\nfpath = paste(getwd(), \"/data/\", sep = \"\")\nfileName = \"gourmetFoods.txt\"   \ninputFile <- paste(fpath, fileName, sep = \"\")\nconn  <- file(inputFile, open = \"r\")\nline=readLines(conn, n = -1L, ok = TRUE, warn = FALSE)\nclose(conn)\n\nWill read in the data from github\n```{r}\n\n\nx <- \"https://raw.githubusercontent.com/jwindokun/FinalProject/master/data/gourmetFoods_test.txt\"\n\ntry ({\n  \nline=readLines(x, n = -1L, ok = TRUE, warn = FALSE)  \n\n})\n\n\n```\n\n\n```{r}\ntry({\ndf <- data.frame(productID =character(), title = character(), price = as.numeric(character()), userID =character(), profileName = character(),\n                 helpfulness = character(), score = as.numeric(character()), time = character(), summary = character(), text = character(),stringsAsFactors=FALSE)\n\n\nn = 1\nd <- data.frame(productID =character(), title = character(), price = as.numeric(character()), userID =character(), profileName = character(),\n                helpfulness = character(), score = as.numeric(character()), time = character(), summary = character(), text = character(),stringsAsFactors=FALSE)\n\n}, silent = TRUE)\n#for (i in 1:length(line)){\n# for the purpose of demonstration will only read in the first 10000 lines of the file  \nfor (i in 1:1000){  \n  \ntry({\n w = str_split_fixed(line[i], \":\", 2)\n    if (!is.na(w[1])){\n      if (n < 11) {\n        d[1, n] = str_trim(w[2])\n        n = n + 1\n        } else {\n        df = rbind(df, d)\n        n = 1\n      }\n    }\n \n}, silent = TRUE)\n  }\n\n```\n\nclean the data\n```{r dataTrasformation}\nstr(df)\n\ndf$time = as.POSIXct(as.numeric(df$time), origin=\"1970-01-01\")\ndf$price[df$price == \"unknown\"] = 0\ndf$price = as.numeric(df$price)\ndf$score = as.numeric(df$score)\n\nfor (i in 1 :length(df$helpfulness)){ \n  try({\n\n  e = df$helpfulness[i]\n  e = strsplit(e, split = \"/\", fixed = TRUE)[[1]]\n  e = as.numeric(e[1])/as.numeric(e[2])\n  if (is.finite(e)) {\n        df$helpfulness[i] = e\n    } else {\n\n        df$helpfulness[i] = 0\n    }\n\n}, silent = TRUE)  \n}\n\ndf$helpfulness = as.numeric(df$helpfulness)\nstr(df)\ndf[1,]\n\n```\n\n```{r sentimentAnalysis}\ngithubURL = \"https://github.com/jwindokun/FinalProject/raw/master/data/gourmetFoods.RData\"\n\ntry ({\n  \n  load(url(githubURL))\n  \n})\n\n\napi_key = \"45319ace2f7c43fc55d05c2f973ba6261a5de4f0\"\n\n\napi = paste(\"http://access.alchemyapi.com/calls/text/TextGetTextSentiment?apikey=\", api_key, \"&outputMode=json\", \"&text=\", sep = \"\")\n\ngourmetFoodsAPI = gourmetFoods\n\ngourmetFoodsAPI[1,]\n\n#for i in 1:nrow(gourmetfoodsAPI){\nfor (i in 1:2){\n\n    if (length(gourmetFoodsAPI$text[i]) > 0) {\n\n\n        phrase = URLencode(gourmetFoodsAPI$text[i])\n        api_url = paste(api, phrase, sep=\"\")\n        result = getURI(api_url)\n        r = fromJSON(result)\n        gourmetFoodsAPI$apitextType[i] = ifelse(!is.null(r$docSentiment$type), r$docSentiment$type, \"\")\n        gourmetFoodsAPI$apitextScore[i] = ifelse(!is.null(r$docSentiment$score), r$docSentiment$score, 0)\n    }\n\n\n    if (length(gourmetFoodsAPI$summary[i]) > 0) {\n        phrase = URLencode(gourmetFoodsAPI$summary[i])\n        api_url = paste(api, phrase, sep=\"\")\n        result = getURI(api_url)\n        r = fromJSON(result)\n        gourmetFoodsAPI$apisummaryType[i] = ifelse(!is.null(r$docSentiment$type), r$docSentiment$type, \"\")\n        gourmetFoodsAPI$apisummaryScore[i] = ifelse(!is.null(r$docSentiment$score), r$docSentiment$score, 0)\n    }\n\n    Sys.sleep(2)\n}\n\n\n\ngourmetFoodsAPI[1,]\n\n\n```\n\n```{r amazonWeb}\ngithubURL = \"https://github.com/jwindokun/FinalProject/raw/master/data/gourmetFoods.RData\"\n\ntry ({\n  \n  load(url(githubURL))\n  \n})\n\n\ndfAmazon <- data.frame(userID = character(), reviewerName =  character(), numReviews = numeric(), itemName = character(),\n                       itemPrice = numeric(), date = character(), text = character(),stringsAsFactors=FALSE)\n\n# For demonstration purposes will only use the first 10 rows\n#for (i in length(gourmetFoods)) {\nfor (i in 10) {\n\n    try({\n    \n    userID = gourmetFoods$userID[i]\n    website = paste(\"http://www.amazon.com/gp/cdp/member-reviews/\", userID, sep =\"\") \n    r_site <- html(website)\n    r <- r_site %>%\n    html_nodes(\".small\") %>%\n    html_text() %>%\n    gsub(\"[\\t\\n\\r\\f\\v]\", \"\", .)\n\n\n    #Get the reviewer name\n    df <- data.frame(userID = character(), reviewerName =  character(), numReviews = numeric(), itemName = character(),\n                     itemPrice = numeric(), date = character(), text = character(),stringsAsFactors=FALSE)\n\n\n    # First line contains reviewer information\n    reviewerName = substr(str_trim(r[1]), start = 13, stop = (nchar(str_trim(r[1])) -10))\n   \n    # Line 3 contains the total number of reviewsreviews\n    numReviews = as.numeric(strsplit(str_trim(r[3]), split = \" \", fixed = TRUE)[[1]][3])\n\n   \n    # get the items reviewed\n\n    # Line 16 and (with an interval of 8) contains information on the item reviewed)\n    n = 1\n    for (i in seq(16,length(r),8)){\n      \n        df[n, \"userID\"] = ifelse(!is.null(userID), userID, \"\")\n       \n        df[n, \"reviewerName\"] = ifelse(!is.null(reviewerName), reviewerName, \"\")\n        df[n, \"numReviews\"] =ifelse(!is.null(numReviews), numReviews, 0)\n\n        t = str_split_fixed(str_trim(r[i]), \":\", 2)\n                \n        while (nchar(t[1]) < 4){\n          \n          t = str_split_fixed(str_trim(r[i + 1]), \":\", 2)\n          i = i+1\n          \n        }\n                      \n        t = str_split_fixed(str_trim(r[i]), \"Price:\", 2)\n        df[n, \"itemName\"] = ifelse(!is.null(t[1]), t[1], \"\")\n        \n        \n        \n        \n        #df[n, \"itemPrice\"] =ifelse(!is.null(t[2]), as.numeric(str_sub(str_trim(t[2]),2)), 0)\n        p = as.numeric(str_sub(str_trim(t[2]),2))\n        f <- function(x) is.numeric(x) & !is.na(x)\n        #print (f(p))\n        df[n, \"itemPrice\"] =ifelse(f(p), p, 0)\n        n = n + 1\n\n    }\n\n  \n    # Line 20 and (with an interval of 20 contains information on the date of the review, and the text of the review)\n    n = 1\n    for (i in seq(20,length(r),8)){\n      \n        gDate <- \"(([[:alpha:]]+)([[:space:]])([0-9]{1,2})([,])([[:space:]])([0-9]{4}))\"\n        strings <- str_trim(r[i])\n        \n        date = str_extract(strings, gDate)\n        \n        while (is.na(date)){\n          \n          strings <- str_trim(r[i+1])\n          date = str_extract(strings, gDate)\n          i = i+1\n          \n        }\n        \n        \n        #date = as.Date(str_extract(strings, gDate), \"%B %d, %Y\")\n        #print (date) \n        f = function (x) is.na(as.Date(as.character(x),format=\"%B/%m/%Y\"))\n        \n        \n        df[n, \"date\"] = ifelse(f(date), date, \"\")\n             \n          \n        s = str_split_fixed(str_trim(r[i]), \":\", 2)[2]\n        s = str_trim(str_split_fixed(s, \")\", 2)[2])\n        df[n, \"text\"] = ifelse(!is.null(s), s, \"\")\n\n        n = n + 1\n\n    }\n\n    dfAmazon = rbind(dfAmazon, df)\n    Sys.sleep (2)\n\n    }, silent = TRUE)\n\n}\n\n\nstr(dfAmazon)\ndfAmazon[1,]\n\n\n\n```\n\n```{r graphs, echo=FALSE}\ngithubURL = \"https://github.com/jwindokun/FinalProject/raw/master/data/gourmetFoods.RData\"\n\ntry ({\n  \n  load(url(githubURL))\n  \n})\n\n\nt = 0\n\n#Users with the most reviews\nsql = \"SELECT Count(gourmetFoods.userID) AS numReviews, gourmetFoods.profileName FROM gourmetFoods GROUP BY gourmetFoods.profileName\n        HAVING (((gourmetFoods.profileName)<>'unknown')) ORDER BY Count(gourmetFoods.userID) DESC limit 10 ;\"\n\nresult = sqldf(sql)\n\n\nggplot(result, aes(x = reorder(profileName, numReviews), y = numReviews)) + geom_bar(stat=\"identity\", fill=\"lightblue\", colour=\"black\") +\n    labs(title = \"Number of Reviews per Reviewer (Top Ten Reviewers)\", x = \"Reviewer\", y = \"Count\") + theme_bw()+\n    theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\nSys.sleep (t)\n\n#Average Review Score by Reviewer\nsql = \"SELECT Count(gourmetFoods.userID) AS numReviews, gourmetFoods.profileName, Avg(gourmetFoods.score) AS AvgOfscore, Max(gourmetFoods.score) AS MaxOfscore, Min(gourmetfoods.score) AS MinOfscore\n        FROM gourmetFoods GROUP BY gourmetFoods.profileName HAVING (((gourmetFoods.profileName)<>'unknown')) ORDER BY Count(gourmetFoods.userID) DESC limit 10;\"\n\nresult = sqldf(sql)\n\nggplot(result, aes(x = reorder(profileName, AvgOfscore), y = AvgOfscore)) + geom_bar(stat=\"identity\", fill=\"green\", colour=\"red\") +\n    labs(title = \"Average Reviewer Score By Reviewer (Top Ten Reviewers)\", x = \"Reviewer\", y = \"Average Score\") + theme_bw()+\n    theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\nSys.sleep (t)\n#Average helpfulness per reviewer\n\nsql = \"SELECT gourmetFoods.userID, gourmetFoods.profileName, Avg(gourmetFoods.helpfulness) AS aveOfhelpfulness, Count(gourmetFoods.helpfulness) AS countOfHelpfulness\n        FROM gourmetFoods GROUP BY gourmetFoods.userID, gourmetFoods.profileName ORDER BY Avg(gourmetFoods.helpfulness)  DESC , Count(gourmetFoods.helpfulness)\n        DESC limit 10;\"\n\n\nresult = sqldf(sql)\n\nggplot(result, aes(x = reorder(profileName, aveOfhelpfulness),  y = aveOfhelpfulness,fill = countOfHelpfulness)) + geom_bar(stat=\"identity\", fill = \"brown\", colour=\"red\") +\n    labs(title = \"Average Helpfullness Score By Reviewer (Top Ten Reviewers)\", x = \"Reviewer\", y = \"Average Score\") + theme_bw()+\n    theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\nSys.sleep (t)\n#Ploting Helpfulness score with Reviewer score\n\nggplot(gourmetFoods, aes(x=gourmetFoods$score,y=gourmetFoods$helpfulness)) + geom_point(position=position_jitter(w=0.1,h=0.0), color =\"red\") +\n    geom_smooth(method=\"lm\", se=FALSE, fill = \"blue\", size = 2) + ylab('Helpfulness Score') + xlab('Reviewer Score') + ggtitle(\"Scatter Plot of Helpfullness Score vs Reviwer Score\")\n\n\n# Statistics\n\nfit = lm(helpfulness ~score, data = gourmetFoods)\ncoef(fit)\nanova(fit)\nsummary(fit)\n\nSys.sleep (t)\n# look at Sentiment Analysis of summary and text\n\n\n\n# fpath = paste(getwd(),\"/data/gourmetFoodsAPI.RData\", sep = \"\" )\n# w = load(fpath)\n\n\n\ngithubURL = \"https://github.com/jwindokun/FinalProject/raw/master/data/gourmetFoodsAPI.RData\"\n\ntry ({\n  \n  load(url(githubURL))\n  \n})\n\n\n\nggplot(gourmetFoodsAPI, aes(x=gourmetFoodsAPI$apisummaryScore,y=gourmetFoodsAPI$apitextScore)) + geom_point(position=position_jitter(w=0.1,h=0.0), color =\"red\") +\n  geom_smooth(method=\"lm\", se=FALSE, fill = \"blue\", size = 2) + ylab('Text Score') + xlab('Summary Score') + ggtitle(\"Scatter Plot of Summry Score vs Text Score\")\n\nfit = lm(apitextScore ~apisummaryScore, data = gourmetFoodsAPI)\ncoef(fit)\nanova(fit)\nsummary(fit)\n\n\n```\n\n",
    "created" : 1418414507510.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "11|24|32|3|\n",
    "hash" : "690978704",
    "id" : "C8A7289D",
    "lastKnownWriteTime" : 1418419492,
    "path" : "C:/Users/Jare_2/Desktop/WorkDocs/Git/Git/Cuny/607/FinalProject/FinalProject/FinalProject/R/607_Final_Project.Rmd",
    "project_path" : "R/607_Final_Project.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}